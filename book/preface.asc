[preface]
= 서문

[quote]
____
스프링부트를 써보지 않았다면 지금 당장 써보자.
____

스프링부트를 자신의 도구로 사용할 수 있게 된다면 여러분은 꽤 괜찮은 무기를 손에 넣었다고 할 수 있다.

스프링 프레임워크를 기반으로 애플리케이션을 만들려면 그 전에 많은 작업을 필요로 한다. 그 중에 하나가 `~-context.xml` 에서 사용하려는 컴포넌트, 빈 등을 정의하는 작업을 해야 한다. 그나마 IDE가 많이 도움을 주기는 하지만 부족하게만 느껴지는 지원 속에서 힘겹게 힘겹게 설정을 하는 작업은 자바(스프링 생태계)에 막 입문한 사람들에게는 부담이 될 수 밖에 없다.

스프링에서 자바설정 `JavaConfig` 을 지원하면서 스프링부트가 나올 토대가 마련되었다. 스프링부트를 사용할 때 기본적인 아키텍처 요구사항 중에 하나가 `@SpringBootApplication` 이 선언되어 있는 메인클래스를 프로젝트 패키지 제일 상위에 위치시키고 하위에 패키지 및 클래스를 작성하는 것을 권장하고 있다. 이는 `@SpringBootApplication` 안에 선언되어 있는 `@ComponentScan` 과도 관련이 있는데 스프링 컴포넌트를 스캔을 `@SpringBootApplication` 선언 클래스부터 시작하여 하향식으로 진행하기 때문이다. 물론 다른 패키지에 둘 수 있겠지만 스프링부트를 빠르게 배우는 방법은 '스프링부트에서 권장하는 방식'을 따르는 것이다. 그게 익숙해지면 개발자 역량에 따라 다양한 방법으로 확장 가능하다. 이건 스프링 프레임워크가 가지고 있는 강점 중 하나이기도 하다.

스프링부트는 자동구성을 지원하는 컴포넌트들에 대한 기본구성을 해둔 클래스들이 존재한다. 보통 `<component>AutoConfiguration` 이라는 이름으로  `spring-boot-autoconfigure` jar 파일 안에 `org.springframework.boot.autoconfigure` 패키지에 사용하는 라이브러리나 프레임워크이름으로 구분되어 있다. 이 패키지를 살펴보면 각 기능들이 어떤 설정을 참조하여 어떻게 구성되고 짐작할 수 있다. 이 패키지를 살펴보고 사용하는 방법에 대해서도 설명하겠다.
